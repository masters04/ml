17.	Write a python program to Implement Decision Tree classifier model on Data which is extracted from images that were taken from genuine and forged banknote-like specimens. 


import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import classification_report

data=pd.read_csv("features.csv")

x=data[["a1","a2","a3","a4"]]
y=data['label']

xtrain,xtest,ytrain,ytest=train_test_split(x,y,test_size=0.2,random_state=42)

dc=DecisionTreeClassifier(random_state=42)

dc.fit(xtrain,ytrain)

ypred=dc.predict(xtest)

cr=classification_report(ytest,ypred)
print(cr)

print(dc.predict([[4.6765,-3.3895,3.4896,1.4771]]))
print(dc.predict([[0.0040545,0.62905,-0.64121,0.75817]]))

15.	Write a python program to implement Linear SVM using UniversalBank.csv 
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.svm import SVC
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix

data = pd.read_csv('UniversalBank.csv')

print("Data sample:")
print(data.head())

data = data.drop(columns=['ID', 'ZIP Code'], errors='ignore')
X = data.drop(columns=['PersonalLoan'])  
y = data['PersonalLoan']                 

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)
svm_model = SVC(kernel='linear', random_state=42)
svm_model.fit(X_train, y_train)
y_pred = svm_model.predict(X_test)
accuracy = accuracy_score(y_test, y_pred)
print(f"Model Accuracy: {accuracy * 100:.2f}%")
print("\nClassification Report:")
print(classification_report(y_test, y_pred))
print("\nConfusion Matrix:")
print(confusion_matrix(y_test, y_pred))

