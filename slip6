9.	Write a python program to implement Polynomial Linear Regression for Boston Housing Dataset 

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error
data=pd.read_csv("housing.csv")
print(data)
x=data[["sqft_living"]]
y=data.price
xtrain,xtest,ytrain,ytest=train_test_split(x,y,test_size=0.2)
lr=LinearRegression()
lr.fit(xtrain,ytrain)
ypred=lr.predict(xtest)
cm=mean_absolute_error(ytest,ypred)
from sklearn.preprocessing import PolynomialFeatures
pr=PolynomialFeatures(degree=2)
xpoly=pr.fit_transform(x)
poreg=LinearRegression()
poreg.fit(xpoly,y)
print(lr.intercept_)
print(lr.coef_)
print(poreg.intercept_)
print(poreg.coef_)
print(lr.predict([[1000]]))
print(poreg.predict(pr.fit_transform([[1000]])))

10.	Use K-means clustering model and classify the employees into various income groups or clusters. Preprocess data if require (i.e. drop missing or null values).

import pandas as pd
import numpy as np
from sklearn.cluster import KMeans
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import silhouette_score
import matplotlib.pyplot as plt
import seaborn as sns
df = pd.read_csv('employee_data.csv')
df.dropna(inplace=True)
data = df[['Age', 'Experience', 'Income']]
scaler = StandardScaler()
scaled_data = scaler.fit_transform(data)
inertia = [] 
for k in range(1, 11):
    kmeans = KMeans(n_clusters=k, random_state=42)
    kmeans.fit(scaled_data)
    inertia.append(kmeans.inertia_)
plt.figure(figsize=(8, 5))
plt.plot(range(1, 11), inertia, marker='o')
plt.xlabel('Number of Clusters (k)')
plt.ylabel('Inertia (Sum of Squared Distances)')
plt.title('Elbow Method for Optimal k')
plt.show()
optimal_k = 3 
kmeans = KMeans(n_clusters=optimal_k, random_state=42)
df['Cluster'] = kmeans.fit_predict(scaled_data)
plt.figure(figsize=(8, 5))
sns.scatterplot(data=df, x='Income', y='Experience', hue='Cluster', palette='Set1', s=100)
plt.title('Employee Clusters Based on Income and Experience')
plt.show()
cluster_centers = scaler.inverse_transform(kmeans.cluster_centers_)
print("Cluster Centers:\n", cluster_centers)

